<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.basic.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.basic.model.User">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <!--<result column="loginname" property="loginname" jdbcType="VARCHAR"/>-->
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="TINYINT"/>
        <result column="age" property="age" jdbcType="TINYINT"/>
        <!--<result column="usertype" property="usertype" jdbcType="TINYINT"/>-->
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="organization_id" property="organizationId" jdbcType="INTEGER"/>
        <result column="createdate" property="createdate" jdbcType="TIMESTAMP"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="code" property="code" jdbcType="VARCHAR"/>
        <result column="user_id" property="user_id" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="userVoResultMap" type="com.basic.utils.UserVo">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <!--<result column="loginname" property="loginname" jdbcType="VARCHAR"/>-->
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="TINYINT"/>
        <result column="age" property="age" jdbcType="TINYINT"/>
        <!--<result column="usertype" property="usertype" jdbcType="TINYINT"/>-->
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="organization_id" property="organizationId" jdbcType="INTEGER"/>
        <result column="createdate" property="createdate" jdbcType="TIMESTAMP"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="code" property="code" jdbcType="VARCHAR"/>
        <result column="user_id" property="user_id" jdbcType="VARCHAR"/>

        <result column="organizationName" property="organizationName" jdbcType="VARCHAR"/>

        <collection property="rolesList" ofType="Role">
            <id column="roleId" property="id"/>
            <result column="roleName" property="name"/>
        </collection>
    </resultMap>

    <sql id="Base_Column_List">
        ID, NAME, PASSWORD, SEX, AGE, CODE, STATUS, ORGANIZATION_ID, CREATEDATE,PHONE,USER_ID
    </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from USERS
        where ID = #{id,jdbcType=BIGINT}
    </select>

    <select id="findUserByLoginName" resultMap="BaseResultMap" parameterType="java.lang.String">
        SELECT
        <include refid="Base_Column_List"/>
        FROM USERS
        WHERE CODE = #{username}
    </select>

    <select id="findUserVoById" resultMap="userVoResultMap" parameterType="java.lang.Long">
        SELECT
        t.id,
        t.code,
        t.name,
        password,
        sex,
        age,
        t.status,
        organization_id,
        t.user_id,
        t.createdate,
        phone,
        s.name AS organizationName,
        o.id AS roleId,
        o.name AS roleName
        FROM
        USERS t
        LEFT JOIN user_role r ON t.id = r.user_id
        LEFT JOIN role o ON r.role_id = o.id
        LEFT JOIN organization s ON s.id = t.organization_id
        <where>
            t.id = #{id}
        </where>
    </select>

    <select id="findUserById" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from USERS
        where id = #{id}
    </select>

    <!-- 
    <select id="findUserPageCondition" resultMap="userVoResultMap" parameterType="PageInfo">
        SELECT
        t.id,
        loginname,
        t.name,
        password,
        sex,
        age,
        usertype,
        t.status,
        organization_id,
        t.createdate,
        phone,
        s.name AS organizationName,
        o.id AS roleId,
        o.name AS roleName
        FROM
        USERS t
        LEFT JOIN user_role r ON t.id = r.user_id
        LEFT JOIN role o ON r.role_id = o.id
        LEFT JOIN organization s ON s.id = t.organization_id
        <where>
            <if test=" condition.name != null and condition.name != '' ">
                t.name = #{condition.name}
            </if>
            <if test=" condition.organizationId != null ">
               and t.organization_id = #{condition.organizationId}
            </if>
            <if test="condition.startTime != null">
                <![CDATA[
            and t.createdate >= #{condition.startTime}
           ]]>
            </if>
            <if test="condition.endTime != null">
                <![CDATA[
            and t.createdate <= #{condition.endTime}
        ]]>
            </if> 
        </where>
        LIMIT #{from}, #{size}
    </select> -->

    <select id="findUserPageCondition" resultMap="userVoResultMap" parameterType="PageInfo">
        SELECT * FROM ( select A.*,ROWNUM RN from (SELECT t.id,
        t.code,
        t.password,
        t.name,
        t.sex,
        t.age,
        t.status,
        t.createdate,
        t.phone,
        t.organization_id,
        t.user_id,
        s.name AS organizationName,
        o.id AS roleId,
        o.name AS roleName
        FROM
        USERS t
        LEFT JOIN user_role r ON t.id = r.user_id
        LEFT JOIN role o ON r.role_id = o.id
        LEFT JOIN organization s ON s.id = t.organization_id
        <where>
            <if test=" condition.name != null and condition.name != '' ">
                t.name = #{condition.name}
            </if>
            <if test=" condition.organizationId != null ">
                and t.organization_id = #{condition.organizationId}
            </if>
            <if test="condition.startTime != null">
                <![CDATA[
            and t.createdate >= #{condition.startTime}
           ]]>
            </if>
            <if test="condition.endTime != null">
                <![CDATA[
            and t.createdate <= #{condition.endTime}
        ]]>
            </if>
        </where>
        ) A WHERE <![CDATA[ ROWNUM <=#{size} ]]>) WHERE  <![CDATA[  ROWNUM >= #{from}  ]]>
    </select>


    <select id="findUserPageCount" resultType="java.lang.Integer" parameterType="PageInfo">
        select count(*) count
        from users t
        <where>
            <if test=" condition.name != null and condition.name != '' ">
                t.name = #{condition.name}
            </if>
            <if test=" condition.organizationId != null ">
                t.organization_id = #{condition.organizationId}
            </if>
            <if test="condition.startTime != null">
                <![CDATA[
            and t.createdate >= #{condition.startTime}
           ]]>
            </if>
            <if test="condition.endTime != null">
                <![CDATA[
            and t.createdate <= #{condition.endTime}
            ]]>
            </if>
        </where>
    </select>

    <delete id="deleteById" parameterType="java.lang.Long">
    delete from USERS
    where id = #{id,jdbcType=BIGINT}
  </delete>


    <!--<select id="getUserKey" resultType="String">
        select S_USERS.Nextval from dual
    </select>-->

    <select id="getUserId" resultType="String">
        select USER_SEQ_ID.Nextval from dual
    </select>


    <insert id="insert" parameterType="com.basic.model.User">
        <!-- <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey> -->
        insert into users (id,code, name, password,
        sex, age,
        status, organization_id, createdate,
        phone,user_id)
        values (#{id,jdbcType=BIGINT},#{code,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR},
        #{password,jdbcType=VARCHAR},
        #{sex,jdbcType=TINYINT}, #{age,jdbcType=TINYINT},
        #{status,jdbcType=TINYINT}, #{organizationId,jdbcType=INTEGER}, sysdate,
        #{phone,jdbcType=VARCHAR},#{user_id,jdbcType=VARCHAR})
    </insert>

    <update id="updateUserPwdById">
    update USERS
    set password = #{pwd,jdbcType=VARCHAR},
    createdate = sysdate
    where id = #{userId,jdbcType=BIGINT}
  </update>

    <update id="updateUser" parameterType="com.basic.model.User">
        update USERS
        <set>
            <if test="code != null">
                code = #{code,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=TINYINT},
            </if>
            <if test="age != null">
                age = #{age,jdbcType=TINYINT},
            </if>

            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="organizationId != null">
                organization_id = #{organizationId,jdbcType=INTEGER},
            </if>
            <if test="createdate != null">
                createdate = #{createdate,jdbcType=TIMESTAMP},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="user_id != null">
                user_id = #{user_id,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
</mapper>